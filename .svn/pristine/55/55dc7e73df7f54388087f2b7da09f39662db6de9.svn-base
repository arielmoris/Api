package pt.api.bean;

import java.io.UnsupportedEncodingException;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.URLEncoder;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import pt.api.report.gamestats.GameStatsResponse;
import pt.api.util.Constants;
import pt.api.util.DateDeserializer;
import pt.api.util.HttpUtil;
import pt.api.util.Logger;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public abstract class MethodBase{
	
	protected static Logger logger = new Logger();
	
	public static <T extends ResponseBase> T processSend(T response, String url, String entityKey, ConnectionProperties connectionProperties){
		Class<?> clazz = response.getClass();
		
		HttpUtil httpUtil = new HttpUtil();
		httpUtil.setConnectionProperties(connectionProperties);
		
		Map<String, String> headers = new HashMap<String, String>();
		if(entityKey != null && !entityKey.equals(""))
			headers.put("X_ENTITY_KEY", entityKey);
		httpUtil.setHeaders(headers);
		
		try {
			ResponseWrapper responseWrapper = httpUtil.sendPost(url);
			if(responseWrapper.getCode() == Constants.ResponseCode.SUCCESS){
				Gson gson  = new GsonBuilder().registerTypeAdapter(Date.class, new DateDeserializer()).create();
				String jsonobj =  responseWrapper.getObj();
				if(clazz == GameStatsResponse.class){ //special case
					jsonobj = jsonobj.replaceAll("#", "");
				}
				response = (T) gson.fromJson(jsonobj, clazz);
			}else{
				response.setErrorcode(Constants.ResponseCode.FAILED);
				response.setError(responseWrapper.getMessage());
			}
		} catch (Exception e1) {
			logger.Log_Error(e1);
			response.setErrorcode(Constants.ResponseCode.FAILED);
			response.setError("Try again later.");
		}finally{
			if(response == null){
				try {
					response = (T) clazz.newInstance();
					response.setErrorcode(Constants.ResponseCode.FAILED);
					response.setError("Try again later.");
				} catch (Exception e) {}
			}
		}
		
		return response;
	}
	
	public static  <T extends RequestBase> String generateUri(T request, String uri){
		Field[] fields = request.getClass().getDeclaredFields();
		StringBuilder sb = new StringBuilder();
		StringBuilder uriBuilder = new StringBuilder(uri);
		
		String params = "";
		for(Field field : fields){
			String name = field.getName();
			String getterName =  "get"+ name.substring(0,1).toUpperCase() + name.substring(1);
			
			try {
				Method method = request.getClass().getMethod(getterName);
				Object valueObject = method.invoke(request);
				if(name.equalsIgnoreCase("params")){
					Gson gson = new GsonBuilder().registerTypeAdapter(Date.class, new DateDeserializer()).create();
					params = gson.toJson(valueObject);
				}else{
					if(valueObject != null && !valueObject.equals("")){
						try {
							valueObject = URLEncoder.encode(valueObject.toString(), "UTF-8");
						} catch (UnsupportedEncodingException e) {
							logger.Log_Error(e);
						}
						
						if(name.charAt(0) == '_'){
							name = name.substring(1);
						}
						
						if(uriBuilder.append(sb).charAt(uriBuilder.length()-1) == '/'){
							sb.append(name).append("/").append(valueObject);
						}else{
							sb.append("/").append(name).append("/").append(valueObject);
						}
					}
				}
			} catch (NoSuchMethodException e) {
				logger.Log_Error(e);
			} catch (SecurityException e) {
				logger.Log_Error(e);
			} catch (IllegalAccessException e) {
				logger.Log_Error(e);
			} catch (IllegalArgumentException e) {
				logger.Log_Error(e);
			} catch (InvocationTargetException e) {
				logger.Log_Error(e);
			}
			
		}
		if(params!=null && !params.equals("")){
			sb.append("?params=").append(params);
		}

		uriBuilder = null;
		String str = sb.toString() ;
		
		uri+=str;
		return uri;
	}
	
}
